# coding: utf-8

# TODO - split the asserts between algebraic and weak formulations ones
#      - add assert for grad in vector case
# TODO: - __call__ examples are not working anymore

from sympy import Symbol
from sympy.core.containers import Tuple
from sympy import symbols
from sympy import IndexedBase
from sympy import Matrix
from sympy import Function
from sympy import pi, cos, sin
from sympy.physics.quantum import TensorProduct

from sympde.core import dx, dy, dz
from sympde.core import Constant
from sympde.core import ScalarField
from sympde.core import grad, dot, inner, cross, rot, curl, div
from sympde.core import FunctionSpace
from sympde.core import ProductSpace
from sympde.core import ScalarTestFunction
from sympde.core import VectorTestFunction
from sympde.core import BilinearForm, LinearForm, Integral
from sympde.core import atomize
from sympde.core import evaluate
from sympde.core import tensorize
from sympde.core import Mass, Stiffness, Advection, AdvectionT
from sympde.core import Unknown
from sympde.core import Domain

DIM = 3
domain = Domain('Omega', dim=DIM)


# ...
def test_atomize_3d_1():
    print('============ test_atomize_3d_1 =============')

    V = FunctionSpace('V', domain)

    v = ScalarTestFunction(V, name='v')
    w = ScalarTestFunction(V, name='w')
    c = Constant('c')
    F = ScalarField('F', space=V)

    # ...
    assert(atomize(grad(v)) == Tuple(dx(v),
                                      dy(v),
                                      dz(v)))
    assert(atomize(grad(c*v)) == Tuple(c*dx(v),
                                        c*dy(v),
                                        c*dz(v)))
    assert(atomize(grad(F*v)) == Tuple(F*dx(v) + v*dx(F),
                                        F*dy(v) + v*dy(F),
                                        F*dz(v) + v*dz(F)))

    assert(atomize(dot(grad(v), grad(w))) == dx(v)*dx(w) + dy(v)*dy(w) + dz(v)*dz(w))
    # ...

#    expr = grad(F*v)
#    print('> input         >>> {0}'.format(expr))
#    print('> atomized     >>> {0}'.format(atomize(expr)))
# ...

# ...
def test_evaluate_3d_1():
    print('============ test_evaluate_3d_1 =============')

    V = FunctionSpace('V', domain)
    U = FunctionSpace('U', domain)

    v = ScalarTestFunction(V, name='v')
    u = ScalarTestFunction(U, name='u')

    x,y,z = V.coordinates

    c = Constant('c')
    F = ScalarField('F', space=V)
    f1 = Function('f1')
    f2 = Function('f2')
    f3 = Function('f3')

    Ni, Ni_x, Ni_y, Ni_z = symbols('Ni Ni_x Ni_y Ni_z')
    Nj, Nj_x, Nj_y, Nj_z = symbols('Nj Nj_x Nj_y Nj_z')

    bx, by, bz = symbols('bx by bz')
    b = Tuple(bx, by, bz)

    f = Tuple(f1(x,y,z), f2(x,y,z), f3(x,y,z))

    a00 = Constant('a00')
    a10 = Constant('a10')
    a20 = Constant('a20')
    a01 = Constant('a01')
    a11 = Constant('a11')
    a21 = Constant('a21')
    a02 = Constant('a02')
    a12 = Constant('a12')
    a22 = Constant('a22')
    A = Matrix([[a00, a01, a02], [a10, a11, a12], [a20, a21, a22]])

    # ...
    a = BilinearForm((v,u), dot(grad(v), grad(u)))
    assert(evaluate(a, basis={v: 'Ni', u: 'Nj'}) == Ni_x*Nj_x + Ni_y*Nj_y + Ni_z*Nj_z)
    # ...

    # ...
    a = BilinearForm((v,u), dot(grad(v), grad(u)) + c*v*u)
    assert(evaluate(a, basis={v: 'Ni', u: 'Nj'}) == Ni_x*Nj_x + Ni_y*Nj_y + Ni_z*Nj_z + c*Ni*Nj)
    # ...

    # ...
    a = BilinearForm((v,u), dot(grad(v), grad(u)) + F*v*u)
    assert(evaluate(a, basis={v: 'Ni', u: 'Nj'}) == Ni_x*Nj_x + Ni_y*Nj_y + Ni_z*Nj_z + F*Ni*Nj)
    # ...

    # ...
    a = BilinearForm((v,u), dot(grad(F*v), grad(u)))
    assert(evaluate(a, basis={v: 'Ni', u: 'Nj'}) == F*Ni_x*Nj_x + F*Ni_y*Nj_y + F*Ni_z*Nj_z + Ni*Nj_x*dx(F) + Ni*Nj_y*dy(F) + Ni*Nj_z*dz(F))
    # ...

# ...

# ...
def test_atomize_3d_2():
    print('============ test_atomize_3d_2 =============')

    V = FunctionSpace('V', domain, is_vector=True, shape=3)

    v = VectorTestFunction(V, name='v')

    assert(atomize(curl(v)) == Tuple( dy(v[2]) - dz(v[1]),
                                      -dx(v[2]) + dz(v[0]),
                                       dx(v[1]) - dy(v[0])))
    assert(atomize(div(v)) == dx(v[0]) + dy(v[1]) + dz(v[2]))

#    expr = curl(v)
#    print('> input         >>> {0}'.format(expr))
#    print('> atomized     >>> {0}'.format(atomize(expr)))
# ...

# ...
#def test_bilinear_form_3d_10():
#    print('============ test_bilinear_form_3d_10 =============')
#
#    U = FunctionSpace('U', domain)
#    V = FunctionSpace('V', domain)
#
#    u = ScalarTestFunction(U, name='u')
#    v = ScalarTestFunction(V, name='v')
#
#    u1 = ScalarTestFunction(U, name='u1')
#    v1 = ScalarTestFunction(V, name='v1')
#
#    Ni, Ni_x, Ni_y, Ni_z = symbols('Ni Ni_x Ni_y Ni_z')
#    Nj, Nj_x, Nj_y, Nj_z = symbols('Nj Nj_x Nj_y Nj_z')
#
#    c1 = Symbol('c1')
#    c2 = Symbol('c2')
#
#    a = BilinearForm((v,u), inner(grad(u), grad(v)))
#    b = BilinearForm((v,u), u*v)
#    adv = BilinearForm((v,u), dx(u)*v)
#
#    # ...
#    expected = Ni*Nj + Ni_x*Nj_x + Ni_y*Nj_y + Ni_z*Nj_z
#    assert(evaluate(a + b, basis={v: 'Nj', u: 'Ni'}) == expected)
#    # ...
#
#    # ...
#    expected = Ni*Nj + Ni_x*Nj_x + Ni_y*Nj_y + Ni_z*Nj_z
#    assert(evaluate(a + b, basis={v: 'Nj', u: 'Ni'}) == expected)
#    # ...
#
#    # ...
#    expected = 2*Ni_x*Nj_x + 2*Ni_y*Nj_y + 2*Ni_z*Nj_z
#    assert(evaluate(2 * a, basis={v: 'Nj', u: 'Ni'}) == expected)
#    # ...
#
#    # ...
#    expected = c1*(Ni_x*Nj_x + Ni_y*Nj_y + Ni_z*Nj_z)
#    assert(evaluate(c1*a, basis={v: 'Nj', u: 'Ni'}) == expected)
#    # ...
#
#    # ...
#    expected = Ni*Nj*c2 + c1*(Ni_x*Nj_x + Ni_y*Nj_y + Ni_z*Nj_z)
#    assert(evaluate(c1*a + c2*b, basis={v: 'Nj', u: 'Ni'}) == expected)
#    # ...
#
#    # ...
#    expected = c1*(Ni_x*Nj_x + Ni_y*Nj_y + Ni_z*Nj_z) + c2*(Ni*Nj + Ni_x*Nj)
#    assert(evaluate(c1*a  + c2*(b + adv), basis={v: 'Nj', u: 'Ni'}) == expected)
#    # ...
#
#    # ...
#    assert(evaluate(a(u1, v1), basis={v: 'Nj', u: 'Ni'}) == evaluate(a(v1, u1), basis={v: 'Nj', u: 'Ni'}))
#    # ...
#
##    # ... TODO debug
##    expected = Ni_x*Nj
##    assert(evaluate(adv(v1, u1), basis={v: 'Nj', u: 'Ni'}) == expected)
##
##    expected = Nj_x*Ni
##    assert(evaluate(adv(u1, v1), basis={v: 'Nj', u: 'Ni'}) == expected)
##    # ...
#
##    expr = c1*a  + c2*(b + adv)
##    print('> input      >>> {0}'.format(expr))
##    print('> evaluated  >>> {0}'.format(evaluate(expr, basis={v: 'Nj', u: 'Ni'}) ))
##    print('')
# ...

# ...
def test_linear_form_3d_10():
    print('============ test_linear_form_3d_10 =============')

    V = FunctionSpace('V', domain)

    v = ScalarTestFunction(V, name='v')
    x,y,z = V.coordinates

    f = Function('f')
    g = Function('g')
    r = Function('r')

    Ni, Ni_x, Ni_y, Ni_z = symbols('Ni Ni_x Ni_y Ni_z')
    Nj, Nj_x, Nj_y, Nj_z = symbols('Nj Nj_x Nj_y Nj_z')

    c1 = Symbol('c1')
    c2 = Symbol('c2')

    bx, by, bz = symbols('bx by bz')
    b = Tuple(bx, by, bz)
    fgr = Tuple(f(x,y,z), g(x,y,z), r(x,y,z))

    a = LinearForm(v, cos(2*pi*x)*cos(4*pi*y)*cos(5*pi*z)*v)

    # ...
    expected = cos(2*pi*x)*cos(4*pi*y)*cos(5*pi*z)*Ni
    assert(evaluate(LinearForm(v, cos(2*pi*x)*cos(4*pi*y)*cos(5*pi*z)*v),
                    basis={v: 'Ni'}) == expected)
    # ...

    # ...
    expected = f(x,y,z)*Ni
    assert(evaluate(LinearForm(v, f(x,y,z)*v),
                    basis={v: 'Ni'}) == expected)
    # ...

    # ...
    expected = bx*Ni_x + by*Ni_y + bz*Ni_z + f(x,y,z)*Ni
    assert(evaluate(LinearForm(v, dot(b, grad(v)) + f(x,y,z)*v),
                    basis={v: 'Ni'}) == expected)
    # ...

    # ...
    expected = f(x,y,z)*Ni_x + g(x,y,z)*Ni_y + r(x,y,z)*Ni_z
    assert(evaluate(LinearForm(v, dot(fgr, grad(v))),
                    basis={v: 'Ni'}) == expected)
    # ...

#    expr = c1*a  + c2*(b + adv)
#    print('> input      >>> {0}'.format(expr))
#    print('> evaluated  >>> {0}'.format(evaluate(expr, basis={v: 'Ni'}) ))
#    print('')
# ...

# ...
def test_function_form_3d_10():
    print('============ test_function_form_3d_10 =============')

    V = FunctionSpace('V', domain)

    F = ScalarField('F', space=V)

    x,y,z = V.coordinates

    f = Function('f')
    g = Function('g')
    r = Function('r')

    Ni, Ni_x, Ni_y, Ni_z = symbols('Ni Ni_x Ni_y Ni_z')
    Nj, Nj_x, Nj_y, Nj_z = symbols('Nj Nj_x Nj_y Nj_z')

    c1 = Symbol('c1')
    c2 = Symbol('c2')

    bx, by, bz = symbols('bx by bz')
    b = Tuple(bx, by, bz)
    fgr = Tuple(f(x,y,z), g(x,y,z), r(x,y,z))

    # ...
    expected = cos(2*pi*x)*cos(3*pi*y)*cos(5*pi*z)
    assert(evaluate(Integral(cos(2*pi*x)*cos(3*pi*y)*cos(5*pi*z), coordinates=[x,y,z])) == expected)
    # ...

    # ...
    expected = x**2 + y**2 + 1
    e = x*y + z
    assert(evaluate(Integral(dot(grad(e), grad(e)), coordinates=[x,y,z])) == expected)
    # ...

    # ...
    expected = F - cos(2*pi*x)*cos(3*pi*y)*cos(5*pi*z)
    assert(evaluate(Integral(F-cos(2*pi*x)*cos(3*pi*y)*cos(5*pi*z))) == expected)
    # ...

    # ...
    expected = (F - x*y - z)**2
    assert(evaluate(Integral((F - x*y - z)**2)) == expected)
    # ...

    # ...
    expected = dx(F)**2 + dy(F)**2 + dz(F)**2
    assert(evaluate(Integral(dot(grad(F), grad(F)))) == expected)
    # ...

    # ...
    expected = (-x + dy(F))**2 + (-y + dx(F))**2 + (dz(F) - 1)**2
    e = F - (x*y + z)
    assert(evaluate(Integral(dot(grad(e), grad(e)), coordinates=[x,y,z])) == expected)
    # ...

    # ... TODO debug. => infinite recursion!!! why?
    #          must be a problem with Mul treatements
#    e = cos(2*pi*x)*cos(3*pi*y)*cos(5*pi*z)
#    e = cos(2*pi*x)*cos(3*pi*y)*z
#    e = x*y*z
    # ...

#    e = F - (x*y + z)
#    expr = Integral(dot(grad(e), grad(e)), coordinates=[x,y,z])
#    print('> input      >>> {0}'.format(expr))
#    print('> evaluated  >>> {0}'.format(evaluate(expr) ))
#    print('')
# ...

# ...
def test_calls_3d_3():
    print('============ test_calls_3d_3 =============')

    V1 = FunctionSpace('V1', domain)
    V2 = FunctionSpace('V2', domain)
    U1 = FunctionSpace('U1', domain)
    U2 = FunctionSpace('U2', domain)
    W1 = FunctionSpace('W1', domain, is_block=True, shape=3)
    W2 = FunctionSpace('W2', domain, is_block=True, shape=3)
    T1 = FunctionSpace('T1', domain, is_block=True, shape=3)
    T2 = FunctionSpace('T2', domain, is_block=True, shape=3)

    v1 = ScalarTestFunction(V1, name='v1')
    v2 = ScalarTestFunction(V2, name='v2')
    u1 = ScalarTestFunction(U1, name='u1')
    u2 = ScalarTestFunction(U2, name='u2')
    w1 = VectorTestFunction(W1, name='w1')
    w2 = VectorTestFunction(W2, name='w2')
    t1 = VectorTestFunction(T1, name='t1')
    t2 = VectorTestFunction(T2, name='t2')

    V = ProductSpace(V1, V2)
    U = ProductSpace(U1, U2)

    x,y,z = V1.coordinates

    v1v2 = VectorTestFunction(V, name='v1v2')
    u1u2 = VectorTestFunction(U, name='u1u2')

    # ...
    a1 = BilinearForm((v1, u1), u1*v1, name='a1')

    expr = a1(v2, u2)
    # ...

    # ...
    a1 = BilinearForm((v1, u1), u1*v1, name='a1')
    a2 = BilinearForm((v1, u1), dx(u1)*dx(v1), name='a2')

    expr = a1(v2, u2) + a2(v2, u2)
    # ...

    # ...
    a1 = BilinearForm((v1, u1), u1*v1, name='a1')
    a2 = BilinearForm((v1, u1), dx(u1)*dx(v1), name='a2')

    expr = a1(v1, u2) + a2(v2, u1)
    # ...

    # ...
    a1 = BilinearForm((v1, u1), u1*v1, name='a1')
    a2 = BilinearForm((v1, u1), dx(u1)*dx(v1), name='a2')
    a3 = BilinearForm((w1, t1), dot(curl(w1), curl(t1)) + div(w1)*div(t1), name='a3')
    a4 = BilinearForm((w1, u1), div(w1)*u1, name='a4')

    expr = a3(w2,t2) + a2(v2,u2) + a4(w2,u2)
    # ...

    # ...
    l1 = LinearForm(v1, x*y*z*v1, name='l1')

    expr = l1(v2)
    # ...

    # ...
    l1 = LinearForm(v1, x*y*z*v1, name='l1')
    l2 = LinearForm(v2, cos(x+y+z)*v2, name='l2')

    expr = l1(u1) + l2(u2)
    # ...
# ...

# ...
def test_evaluate_3d_3():
    print('============ test_evaluate_3d_3 =============')

    V1 = FunctionSpace('V1', domain)
    U1 = FunctionSpace('U1', domain)
    V2 = FunctionSpace('V2', domain)
    U2 = FunctionSpace('U2', domain)

    v1 = ScalarTestFunction(V1, name='v1')
    u1 = ScalarTestFunction(U1, name='u1')
    v2 = ScalarTestFunction(V2, name='v2')
    u2 = ScalarTestFunction(U2, name='u2')

    V = ProductSpace(V1, V2)
    U = ProductSpace(U1, U2)

    v1v2 = VectorTestFunction(V, name='v1v2')
    u1u2 = VectorTestFunction(U, name='u1u2')

    c = Constant('c')

    Ni, Ni_x, Ni_y, Ni_z = symbols('Ni Ni_x Ni_y Ni_z')
    Nj, Nj_x, Nj_y, Nj_z = symbols('Nj Nj_x Nj_y Nj_z')

    basis = {v1v2: 'Ni', u1u2: 'Nj'}

    # ...
    expr = v1*u1 + dz(v2)*dz(u2)
    a = BilinearForm(((v1, v2), (u1, u2)), expr)

    expected = Matrix([[Ni*Nj, 0], [0, Ni_z*Nj_z]])
    assert(evaluate(a, basis=basis) == expected)
    # ...

    # ...
    expr = v1*u1 + dx(v2)*dx(u1) + dy(v1)*dy(u2) + dz(v2)*dz(u2)
    a = BilinearForm(((v1, v2), (u1, u2)), expr)

    expected = Matrix([[Ni*Nj, Ni_x*Nj_x], [Ni_y*Nj_y, Ni_z*Nj_z]])
    assert(evaluate(a, basis=basis) == expected)
    # ...

#    expr = v1*u1 + dx(v2)*dx(u1) + dy(v1)*dy(u2) + dz(v2)*dz(u2)
#    expr = BilinearForm(((v1, v2), (u1, u2)), expr)
#    print('> input         >>> {0}'.format(expr))
#    print('> normal form   >>> {0}'.format(evaluate(expr, basis=basis)))
# ...

# ...
def test_tensorize_3d_1():
    print('============ test_tensorize_3d_1 =============')

    V = FunctionSpace('V', domain)
    V_0 = FunctionSpace('V_0', domain, coordinates=['x'])
    V_1 = FunctionSpace('V_1', domain, coordinates=['y'])
    V_2 = FunctionSpace('V_2', domain, coordinates=['z'])

    v = ScalarTestFunction(V, name='v')
    u = ScalarTestFunction(V, name='u')

    v0 = ScalarTestFunction(V_0, name='v0')
    u0 = ScalarTestFunction(V_0, name='u0')

    v1 = ScalarTestFunction(V_1, name='v1')
    u1 = ScalarTestFunction(V_1, name='u1')

    v2 = ScalarTestFunction(V_2, name='v2')
    u2 = ScalarTestFunction(V_2, name='u2')

    c = Constant('c')

    bx = Constant('bx')
    by = Constant('by')
    bz = Constant('bz')
    b = Tuple(bx, by, bz)

    # ...
    expected =  TensorProduct(Mass(v2,u2),Mass(v1,u1),Mass(v0,u0))
    assert(tensorize(BilinearForm((v,u), u*v)) == expected)
    # ...

    # ...
    expected =  TensorProduct(Mass(v2,u2),Mass(v1,u1),Stiffness(v0,u0))
    assert(tensorize(BilinearForm((v,u), dx(u)*dx(v))) == expected)
    # ...

    # ...
    expected = TensorProduct(Mass(v2,u2),Advection(v1,u1),Mass(v0,u0))
    assert(tensorize(BilinearForm((v,u), dy(u) * v)) == expected)
    # ...

    # ...
    expected =  TensorProduct(Mass(v2,u2),Mass(v1,u1),Advection(v0,u0))
    assert(tensorize(BilinearForm((v,u), dx(u) * v)) == expected)
    # ...

    # ...
    expected = (TensorProduct(Mass(v2,u2),Mass(v1,u1),Stiffness(v0,u0)) +
                TensorProduct(Mass(v2,u2),Stiffness(v1,u1),Mass(v0,u0)) +
                TensorProduct(Stiffness(v2,u2),Mass(v1,u1),Mass(v0,u0)))
    assert(tensorize(BilinearForm((v,u), dot(grad(v), grad(u)))) == expected)
    # ...

    # ...
    expected = (TensorProduct(Mass(v2,u2),Advection(v1,u1),Mass(v0,u0)) +
                TensorProduct(Mass(v2,u2),Mass(v1,u1),Advection(v0,u0)) +
                TensorProduct(Mass(v2,u2),Mass(v1,u1),Stiffness(v0,u0)) +
                TensorProduct(Mass(v2,u2),Stiffness(v1,u1),Mass(v0,u0)) +
                TensorProduct(Stiffness(v2,u2),Mass(v1,u1),Mass(v0,u0)))
    assert(tensorize(BilinearForm((v,u), dot(grad(v), grad(u)) + dx(u)*v + dy(u)*v)) == expected)
    # ...

    # ...
    expected = (TensorProduct(bx,Mass(v2,u2),Mass(v1,u1),AdvectionT(v0,u0)) +
                TensorProduct(by,Mass(v2,u2),AdvectionT(v1,u1),Mass(v0,u0)) +
                TensorProduct(bz,AdvectionT(v2,u2),Mass(v1,u1),Mass(v0,u0)))

    assert(tensorize(BilinearForm((v,u), dot(b, grad(v)) * u)) == expected)
    # ...

    # ...
    expected = (TensorProduct(bx**2,Mass(v2,u2),Mass(v1,u1),Stiffness(v0,u0)) +
                TensorProduct(bx,by,Mass(v2,u2),Advection(v1,u1),AdvectionT(v0,u0)) +
                TensorProduct(bx,by,Mass(v2,u2),AdvectionT(v1,u1),Advection(v0,u0)) +
                TensorProduct(bx,bz,Advection(v2,u2),Mass(v1,u1),AdvectionT(v0,u0)) +
                TensorProduct(bx,bz,AdvectionT(v2,u2),Mass(v1,u1),Advection(v0,u0)) +
                TensorProduct(by**2,Mass(v2,u2),Stiffness(v1,u1),Mass(v0,u0)) +
                TensorProduct(by,bz,Advection(v2,u2),AdvectionT(v1,u1),Mass(v0,u0)) +
                TensorProduct(by,bz,AdvectionT(v2,u2),Advection(v1,u1),Mass(v0,u0)) +
                TensorProduct(bz**2,Stiffness(v2,u2),Mass(v1,u1),Mass(v0,u0)))

    assert(tensorize(BilinearForm((v,u), dot(b, grad(v)) * dot(b, grad(u)))) == expected)
    # ...

#    expr = dot(b, grad(v)) * dot(b, grad(u))
#    expr = BilinearForm((v,u), expr)
#
#    print('> input         >>> {0}'.format(expr))
#    print('> tensorized    >>> {0}'.format(tensorize(expr)))
# ...

# ...
def test_unknown_3d_1():
    print('============ test_unknown_3d_1 =============')

    domain = Domain('Omega', dim=DIM)

    v = Unknown('v', domain)
    c = Constant('c')

    # ...
    assert(atomize(grad(v)) == Tuple(dx(v),
                                      dy(v),
                                      dz(v)))
    assert(atomize(grad(c*v)) == Tuple(c*dx(v),
                                        c*dy(v),
                                        c*dz(v)))
    # ...
# ...

# .....................................................
if __name__ == '__main__':
    test_atomize_3d_1()
    test_evaluate_3d_1()

    test_atomize_3d_2()

#    test_bilinear_form_3d_10() # TODO not working, since args are the same
    test_linear_form_3d_10()
    test_function_form_3d_10()

    test_evaluate_3d_3()

    test_tensorize_3d_1()
    test_calls_3d_3()

    test_unknown_3d_1()
