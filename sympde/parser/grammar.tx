PDE:
  declarations*=Declaration
;

Declaration:
  Domain | Space | Field | Real | Complex | Alias | Form | Function | Equation
;

Form:
  BilinearForm | LinearForm
;

Domain: "Domain" LPAREN 
                 ("dim" EQ dim=INT)? 
                 ("filename" EQ filename=STRING)? 
                 RPAREN DEF name=ID;

Space: 
  FunctionSpace | VectorFunctionSpace
;

FunctionSpace: 
  "FunctionSpace" LPAREN domain=ID (COMMA "kind" EQ kind=STRING)? RPAREN  DEF name=ID
;

VectorFunctionSpace: 
  "VectorFunctionSpace" LPAREN domain=ID (COMMA "kind" EQ kind=STRING)? RPAREN  DEF name=ID
;

Field: 
  "Field" LPAREN space=ID RPAREN  DEF name=ID
;

Function: 
  "Function" LPAREN parameters*=ID[','] RPAREN  DEF name=ID
;

Alias: 
  name=ID  DEF rhs=Expression
;

Equation: 
  "find" trials=ArgForm "such" "that" 
  lhs=Expression EQ rhs=Expression
  "forall" tests=ArgForm 
  ('and' bc*=BoundaryCondition['and'])?
  ("label" ":" name=STRING)?
;

BoundaryCondition:
  lhs=Expression EQ rhs=Expression 'on' boundary=STRING
;


Real:    "Real" DEF name=ID;
Complex: "Complex" DEF name=ID;

LinearForm: 
  name=ID 
  LPAREN 
    args=ArgForm 
  RPAREN 
  DEF 
  body=BodyForm
;

BilinearForm: 
  name=ID 
  LPAREN 
    args_test=ArgForm 
    COMMA
    args_trial=ArgForm
  RPAREN 
  DEF 
  body=BodyForm
;

BodyForm:
  SimpleBodyForm | Expression
;

SimpleBodyForm:
  LTRIANGLE 
    expression=Expression
  RTRIANGLE (SUBSCRIPT domain=ID)?
;

ArgForm: ArgFormSep | ArgFormParen;
ArgFormSep: functions+=TestFunction[',']  IN space=ID;
ArgFormParen: LPAREN functions+=TestFunction[','] RPAREN IN space=ID;

Expression: 
  op=Term (op=PlusOrMinus op=Term)* 
;

Term: 
  op=Factor (op=MulOrDiv op=Factor)*
;

Factor: 
  (op=Power) | (sign=PlusOrMinus)?  (op=Operand) (trailer=Trailer)? 
;

Trailer:
  LPAREN args*=Expression[','] RPAREN
;

Power: (op=Operand) '**' (arg=Factor);

// there is a problem with this rule, only on my laptop
// it seems it can't parse a word like phi, and only returns "p"
Operand: 
  (op=NUMBER) | (op=ID) | (LPAREN op=Expression RPAREN)
;

EQ:          "=";
DEF:         "::" | "=";
IN:          "::";
COMMA:       ",";
SUBSCRIPT:   '_';
LPAREN:      "(";
RPAREN:      ")";
LTRIANGLE:   '<';
RTRIANGLE:   '>';
PlusOrMinus: '+' | '-';
MulOrDiv:    '*' | '/';
Comment:     /#.*$/;
TestFunction: name=ID;
